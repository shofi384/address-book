{"version":3,"sources":["App.js","serviceWorker.js","index.js","icon.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","change","e","preventDefault","state","target","name","value","delete","FirstName","addressList","toConsumableArray","deleteIndex","findIndex","item","splice","setState","submit","newAddress","LastName","Birthday","Telephone","hideForm","concat","addAddress","bind","assertThisInitialized","_this2","allAddress","map","address","react_default","a","createElement","className","type","onClick","class","addressForm","placeholder","onChange","required","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.10a47279.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './icon.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideForm: true,\n\n      FirstName: '',\n      LastName: '',\n      Birthday: '',\n      Telephone: '',\n\n      addressList: [\n      {\n        FirstName: \"Cathy\" ,\n        LastName: \"Pierce\",\n        Birthday: \"9/14/1996\",\n        Telephone: \"200-910-8132\"\n      },\n      {\n        FirstName: \"Alfonso\",\n        LastName: \"Cooley\",\n        Birthday: \"8/10/1973\",\n        Telephone: \"200-657-9362\"\n      },\n      {\n        FirstName: \"Victor\",\n        LastName: \"Gordon\",\n        Birthday: \"8/3/1970\",\n        Telephone: \"200-661-9407\"\n      },\n      {\n        FirstName: \"Colleen\",\n        LastName: \"Wright\",\n        Birthday: \"10/28/1967\",\n        Telephone: \"200-250-7949\"\n      },\n      {\n        FirstName: \"James\",\n        LastName: \"Johnston\",\n        Birthday: \"5/11/1972\",\n        Telephone: \"200-645-3176\"\n      },\n      {\n        FirstName: \"Anna\",\n        LastName: \"Reyes\",\n        Birthday: \"9/10/1975\",\n        Telephone: \"200-707-8670\"\n      }\n      ]\n    };\n\n    this.addAddress = this.addAddress.bind(this);\n    this.submit = this.submit.bind(this);\n    this.delete = this.delete.bind(this);\n  }\n\n  addAddress() {\n    this.setState({ hideForm: false });\n  }\n\n  change = e => {\n    e.preventDefault();\n    this.state[e.target.name]= e.target.value;\n  }\n\n  delete = (FirstName, e) => {\n    let addressList = [...this.state.addressList];\n    let deleteIndex = addressList.findIndex((item) => item.FirstName === FirstName);\n    addressList.splice(deleteIndex, 1);\n    this.setState({addressList: addressList});\n  }\n\n  submit = e => {\n    e.preventDefault();\n    let newAddress= {\n      FirstName: this.state.FirstName,\n      LastName: this.state.LastName,\n      Birthday: this.state.Birthday,\n      Telephone: this.state.Telephone\n    };\n    this.setState({\n      hideForm: true,\n      addressList: [newAddress, ...this.state.addressList]\n    });\n    this.setState({FirstName: ''});\n    this.setState({LastName: ''});\n    this.setState({Birthday: ''});\n    this.setState({Telephone: ''});\n  }\n\n  render() {\n    const allAddress = this.state.addressList.map(address => \n      <div className='container'>\n        <div>Name: {address.FirstName + ' ' + address.LastName}</div>\n        <div>DOB: {address.Birthday}</div>\n        <div>Tel: {address.Telephone}</div>\n        <button type=\"button\" onClick={this.delete} class='delete'>Delete</button>\n      </div>);\n\n    const addressForm = (<form className='container' >\n        <input type='text' name='FirstName' placeholder='First Name' onChange={this.change} required/>\n        <input type='text' name='LastName' placeholder='Last Name' onChange={this.change} required/>\n        <input type='text' name='Birthday' placeholder='DOB' onChange={this.change} required/>\n        <input type='text' name='Telephone' placeholder='Phone Number' onChange={this.change} required/><br/>\n        <input type=\"submit\" value=\"Submit\" className='button' onClick={this.submit}/>\n      </form>);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p><img src={logo} className=\"App-logo\" alt=\"logo\" />Create your personalized address book here!</p>\n          {this.state.hideForm? <button className='button' onClick={this.addAddress}>+ New Address</button>: <br/>}\n        </header>\n        {this.state.hideForm? <div className=\"addresses\">{allAddress}</div>: <div>{addressForm}</div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon.d82b3f36.png\";"],"sourceRoot":""}